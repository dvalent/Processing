'.source.processing':
  'draw':
    'prefix': 'dr'
    'body': 'void draw() {\n\t$1\n}'
  'float':
    'prefix': 'float'
    'body': 'float $1 = $2;'
  'float[]':
    'prefix': 'float[]'
    'body': 'float[] $1 = new float[$2];'
  'int':
    'prefix': 'int'
    'body': 'int $1 = $2;'
  'int[]':
    'prefix': 'int[]'
    'body': 'int[] $1 = new int[$2];'
  'opengl':
    'prefix': 'gl'
    'body': 'import processing.opengl.*;'
  'setup':
    'prefix': 'se'
    'body': 'void setup() {\n\t$1\n}'
  'size':
    'prefix': 'size'
    'body': 'size($1, $2, ${3:P3D});'
  'string':
    'prefix': 'str'
    'body': 'string $1 = $2;'
  'string[]':
    'prefix': 'string[]'
    'body': 'string[] $1 = new string[$2];'
  'void method':
    'prefix': 'void'
    'body': 'void $1($2 $3) {\n\t$4\n}'
  'PGraphics':
    'prefix': 'pgraphics'
    'body': 'PGraphics pg;\npg = createGraphics(${5:${1:width}, ${2:height}${4:, ${3:applet}}});'
  '@param':
    'prefix': '@'
    'body': '@param  ${1:parameter}  ${2:description}'
  '@private':
    'prefix': '@'
    'body': '@private'
  '@public':
    'prefix': '@'
    'body': '@private'
  '@return':
    'prefix': '@'
    'body': '@return  ${1:parameter}  ${2:description}'
  'Array':
    'prefix': 'array'
    'body': '${1:int}[] ${2:numbers} ${6:= new $1[${3:length}]};'
  'ArrayList':
    'prefix': 'arraylist'
    'body': 'ArrayList<${1:String}> ${2:arraylist} = new ArrayList<$1>();'
  'HALF PI':
    'prefix': 'pi'
    'body': 'HALF_PI'
  'Object':
    'prefix': 'object'
    'body': '${1:Object} ${2:o}${4: = new ${1}($3)};'
  'PFont':
    'prefix': 'font'
    'body': 'PFont ${1:font};\n$1 = loadFont(${3:"${2:FFScala-32.vlw}"});'
  'PGraphics':
    'prefix': 'pgraphics'
    'body': 'PGraphics pg;\npg = createGraphics(${5:${1:width}, ${2:height}${4:, ${3:applet}}});'
  'PI':
    'prefix': 'pi'
    'body': 'PI'
  'PImage':
    'prefix': 'pimage'
    'body': 'PImage(${1:width}, ${2:height});'
  'String':
    'prefix': 'string'
    'body': 'String ${1:str} ${6:= "${3:CCCP}"};'
  'TWO PI':
    'prefix': 'pi'
    'body': 'TWO_PI'
  'abs':
    'prefix': 'abs'
    'body': 'abs(${1:value});'
  'acos':
    'prefix': 'acos'
    'body': 'acos(${1:value});'
  'alpha':
    'prefix': 'alpha'
    'body': 'alpha(${1:color});'
  'ambient':
    'prefix': 'material'
    'body': 'ambient(${8:${3:value1}, ${4:value2}, ${5:value3}});'
  'ambientLight':
    'prefix': 'light'
    'body': 'ambientLight(${1:v1}, ${2:v2}, ${3:v3}${7:, ${4:x}, ${5:y}, ${6:z}});'
  'append':
    'prefix': 'append'
    'body': 'append(${1:array}, ${2:element});'
  'arc':
    'prefix': 'arc'
    'body': 'arc(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:start}, ${6:stop});'
  'arrayCopy':
    'prefix': 'arraycopy'
    'body': 'arrayCopy(${1:src}, ${2:dest}, ${4:, ${3:length}});'
  'asin':
    'prefix': 'asin'
    'body': 'asin(${1:value});'
  'atan':
    'prefix': 'atan'
    'body': 'atan(${1:value});'
  'atan2':
    'prefix': 'atan2'
    'body': 'atan2(${1:y},${2:x});'
  'background grey alpha':
    'prefix': 'background'
    'body': 'background(${1:grey}, ${2:alpha});'
  'background grey':
    'prefix': 'background'
    'body': 'background(${1:grey});'
  'background rgb':
    'prefix': 'background'
    'body': 'background(${1:red}, ${2:green}, ${3:blue});'
  'background rgba':
    'prefix': 'background'
    'body': 'background(${1:red}, ${2:green}, ${3:blue}, ${6:alpha});'
  'background':
    'prefix': 'background'
    'body': 'background(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});'
  'beginCamera':
    'prefix': 'camera'
    'body': 'beginCamera();'
  'beginGL':
    'prefix': 'begingl'
    'body': 'pgl.beginGL();\n$1\npgl.endGL();'
  'beginRecord':
    'prefix': 'file'
    'body': 'beginRecord(${1:renderer}, ${2:filename});'
  'beginShape':
    'prefix': 'beginshape'
    'body': 'beginShape(${1:kind});'
  'bezier':
    'prefix': 'bezier'
    'body': 'bezier(${1:x1}, ${2:y1}, ${3:cx1}, ${4:cy1}, ${5:cx2}, ${6:cy2}, ${7:x2}, ${8:y2});'
  'bezier3D':
    'prefix': 'bezier'
    'body': 'bezier(${1:x1}, ${2:y1}, ${3:z1}, ${4:cx1}, ${5:cy1}, ${6:cz1}, ${7:cx2}, ${8:cy2}, ${9:cz2}, ${10:x2}, ${11:y2}, ${12:z2});'
  'bezierDetail':
    'prefix': 'bezier'
    'body': 'bezierDetail(${1:detail});'
  'bezierPoint':
    'prefix': 'bezier'
    'body': 'bezierPoint(${1:a}, ${1:b}, ${1:c}, ${1:d}, ${1:t});'
  'bezierTangent':
    'prefix': 'bezier'
    'body': 'bezierTangent(${1:a}, ${1:b}, ${1:c}, ${1:d}, ${1:t});'
  'bezierVertex 3D':
    'prefix': 'beziervertex'
    'body': 'bezierVertex(${1:cx1}, ${2:cy1}, ${3:cz1}, ${4:cx2}, ${5:cy2}, ${6:cz2}, ${7:x}, ${8:y}, ${9:z});'
  'bezierVertex':
    'prefix': 'beziervertex'
    'body': 'bezierVertex(${1:cx1}, ${2:cy1}, ${3:cx2}, ${4:cy2}, ${5:x}, ${6:y});'
  'binary':
    'prefix': 'binary'
    'body': 'binary(${3:value}${5:, ${4:digits}});'
  'blue':
    'prefix': 'blue'
    'body': 'blue(${1:color});'
  'boolean':
    'prefix': 'boolean'
    'body': 'boolean ${1:b} ${6:= ${3:true}};'
  'box':
    'prefix': 'box'
    'body': 'box(${4:${1:width}, ${2:height}, ${3:depth}});'
  'break':
    'prefix': 'break'
    'body': 'break ${1:label};'
  'brightness':
    'prefix': 'brightness'
    'body': 'brightness(${1:color});'
  'byte':
    'prefix': 'byte'
    'body': 'byte ${1:b} ${6:= ${3:127}};'
  'camera':
    'prefix': 'camera'
    'body': 'camera(${10:${1:eyeX}, ${2:eyeY}, ${3:eyeZ}, ${4:centerX}, ${5:centerY}, ${6:centerZ}, ${7:upX}, ${8:upY}, ${9:upZ}});'
  'case':
    'prefix': 'case'
    'body': 'case ${1:expression} :\n\t$0\nbreak;\t'
  'catch':
    'prefix': 'catch'
    'body': 'catch (${1:Exception} e) {\n\t$0\n}'
  'ceil':
    'prefix': 'ceil'
    'body': 'ceil(${1:value});'
  'char':
    'prefix': 'char'
    'body': 'char ${1:m} ${6:= "${3:char}"};'
  'class':
    'prefix': 'class'
    'body': '${1:public }class ${2:${TM_FILENAME/(.*?)(\\..+)/$1/}} ${3:extends} {\n\n\tpublic $2 (${4:arguments}) {\n\t\t${0}\n\t}\n\n}\n'
  'color':
    'prefix': 'color'
    'body': 'color ${1:c} ${6:= color(${3:value1}, ${4:value2}, ${5:value3})};'
  'concat':
    'prefix': 'concat'
    'body': 'concat(${1:array1}, ${2:array2});'
  'const':
    'prefix': 'const'
    'body': 'static final ${1:Object} ${2:VAR_NAM} = $0;'
  'constrain':
    'prefix': 'constrain'
    'body': 'constrain(${1:value}, ${2:min}, ${3:max});'
  'copy':
    'prefix': 'copy'
    'body': 'copy(${10:${9:srcImg}, }${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:dx}, ${6:dy}, ${7:dwidth}, ${8:dheight});'
  'cos':
    'prefix': 'cos'
    'body': 'cos(${1:rad});'
  'createReader':
    'prefix': 'file'
    'body': 'createReader(${1:filename});'
  'createShape':
    'prefix': 'createshape'
    'body': 'createShape(${1:type});'
  'createWriter':
    'prefix': 'file'
    'body': 'createWriter(${1:filename});'
  'curve 3D':
    'prefix': 'curve'
    'body': 'curve(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:x3}, ${8:y3}, ${9:z3}, ${10:x4}, ${11:y4}, ${12:z4});'
  'curve':
    'prefix': 'curve'
    'body': 'curve(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});'
  'curveDetail':
    'prefix': 'curve'
    'body': 'curveDetail(${1:detail});'
  'curvePoint':
    'prefix': 'curve'
    'body': 'curvePoint(${1:a}, ${1:b}, ${1:c}, ${1:d}, ${1:t});'
  'curveTightness':
    'prefix': 'curve'
    'body': 'curveTightness(${1:squishy});'
  'curveVertex 3D':
    'prefix': 'curveVertex'
    'body': 'curveVertex(${1:x}, ${2:y}, ${3:z});'
  'curveVertex':
    'prefix': 'curveVertex'
    'body': 'curveVertex(${1:x}, ${2:y});'
  'default':
    'prefix': 'default'
    'body': 'default :\n\t$0\nbreak;\t'
  'degrees':
    'prefix': 'degrees'
    'body': 'degrees(${1:rad});'
  'directionalLight':
    'prefix': 'light'
    'body': 'directionalLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});'
  'dist 3D':
    'prefix': 'dist'
    'body': 'dist(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});'
  'dist':
    'prefix': 'dist'
    'body': 'dist(${1:x1}, ${2:y1}, ${4:x2}, ${5:y2});'
  'doc - class':
    'prefix': 'doc'
    'body': '/**\n *  ${1:Description}\n *\n *\t@author ${2:$TM_FULLNAME}\n *\t@since  ${3:`date +%d.%m.%Y`}\n */'
  'doc - comment':
    'prefix': 'doc'
    'body': '/**\n *\t${1:@private}$0\n */'
  'doc - newline':
    'prefix': 'doc'
    'body': '\n*\t'
  'ellipse':
    'prefix': 'ellipse'
    'body': 'ellipse(${1:x}, ${2:y}, ${3:width}, ${4:height});'
  'ellipseMode':
    'prefix': 'ellipseMode'
    'body': 'ellipseMode(${1:CENTER});'
  'else if':
    'prefix': 'else'
    'body': 'else if ($1) {\n\t$0\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$0\n}'
  'emissive':
    'prefix': 'material'
    'body': 'emissive(${8:${3:value1}, ${4:value2}, ${5:value3}});'
  'endCamera':
    'prefix': 'camera'
    'body': 'endCamera();'
  'endRecord':
    'prefix': 'file'
    'body': 'endRecord();'
  'endShape':
    'prefix': 'endshape'
    'body': 'endShape(${1:mode});'
  'exp':
    'prefix': 'exp'
    'body': 'exp(${1:value});'
  'expand':
    'prefix': 'expand'
    'body': 'expand(${1:array}${3:, ${2:newSize}});'
  'fill grey alpha':
    'prefix': 'fill'
    'body': 'fill(${1:grey}, ${2:alpha});'
  'fill grey':
    'prefix': 'fill'
    'body': 'fill(${1:grey});'
  'fill rgb':
    'prefix': 'fill'
    'body': 'fill(${1:red}, ${2:green}, ${3:blue});'
  'fill rgba':
    'prefix': 'fill'
    'body': 'fill(${1:red}, ${2:green}, ${3:blue}, ${6:alpha});'
  'fill':
    'prefix': 'fill'
    'body': 'fill(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});'
  'float':
    'prefix': 'float'
    'body': 'float ${1:f} ${6:= ${3:0.0}};'
  'floor':
    'prefix': 'floor'
    'body': 'floor(${1:value});'
  'focused':
    'prefix': 'focused'
    'body': 'focused'
  'for in':
    'prefix': 'for'
    'body': 'for (${1:Object} ${2:o} : ${3:array}) {\n\t$0\n}'
  'for':
    'prefix': 'for'
    'body': 'for (int ${1:i} = ${2:0}; ${1:i} < ${3:len}; ++${1:i}) {\n\t$0\n}'
  'frameCount':
    'prefix': 'framerate'
    'body': 'frameCount'
  'frameRate (debug)':
    'prefix': 'framerate'
    'body': 'frameRate'
  'frameRate (set)':
    'prefix': 'framerate'
    'body': 'frameRate($0);'
  'frustum':
    'prefix': 'camera'
    'body': 'frustrum(${7:${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far}});'
  'function':
    'prefix': 'function'
    'body': '${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}'
  'get pixel':
    'prefix': 'get'
    'body': 'get(${6:${1:x}, ${2:y}${5:, ${3:width}, ${4:height}}});'
  'get':
    'prefix': 'get'
    'body': 'public ${1:String} get${2/./\\u$0/}() {\n    return ${2:fieldName};\n}\n'
  'glBindBuffer':
    'prefix': 'glbindbuffer'
    'body': '${2:// A buffer ID of zero unbinds a buffer object}\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, ${1:0});'
  'glCallList':
    'prefix': 'glcalllist'
    'body': '// execute a display list\ngl.glCallList(${1:list});'
  'glClear':
    'prefix': 'glclear'
    'body': 'gl.glClear(${1:GL.GL_COLOR_BUFFER_BIT}${3: | ${2:GL.GL_DEPTH_BUFFER_BIT}});'
  'glClearColor':
    'prefix': 'glclearcolor'
    'body': 'gl.glClearColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});'
  'glColor3f':
    'prefix': 'glcolor3f'
    'body': 'gl.glColor3f(${1:red}, ${2:green}, ${3:blue});'
  'glColor4f':
    'prefix': 'glcolor4f'
    'body': 'gl.glColor4f(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});'
  'glDeleteBuffers':
    'prefix': 'gldeletebuffers'
    'body': '${3:// Parameters are the same for glGenBuffers}\ngl.glDeleteBuffers(${1:4}, ${2:bufferObjects});'
  'glDepthMask':
    'prefix': 'gldepthmask'
    'body': '// enable or disable writing into the depth buffer\ngl.glDepthMask(${1:flag});'
  'glFlush':
    'prefix': 'glflush'
    'body': '// Empties buffers. Call this when all previous issues commands completed\ngl.glFlush();'
  'glGenBuffers':
    'prefix': 'glgenbuffers'
    'body': '// import java.nio.IntBuffer;\n// import java.nio.FloatBuffer;\n// import com.sun.opengl.util.BufferUtil;\n\n// You might need to create four buffers to store vertext data, normal data, texture coordinate data, and indices in vertex arrays\nIntBuffer bufferObjects = IntBuffer.allocate(${1:4}); \ngl.glGenBuffers($1, bufferObjects);\n\nint vertexCount = ${2:3};\nint numCoordinates = ${3:3};\n// vertexCount * numCoordinates\nFloatBuffer vertices = BufferUtil.newFloatBuffer(vertexCount * numCoordinates);\nfloat[] v = {0.0f, 0.0f, 0.0f,\n             1.0f, 0.0f, 0.0f,\n             0.0f, 1.0f, 1.0f};\nvertices.put(v);\n\n// Bind the first buffer object ID for use with vertext array data\ngl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufferObjects.get(0));\ngl.glBufferData(GL.GL_ARRAY_BUFFER, vertexCount * numCoordinates * BufferUtil.SIZEOF_FLOAT, vertices, GL.GL_STATIC_DRAW);'
  'glGenLists':
    'prefix': 'glgenlists'
    'body': 'gl.glGenLists(${1:1})'
  'glGetError':
    'prefix': 'glgeterror'
    'body': 'println(gl.glGetError());'
  'glLoadIdentity':
    'prefix': 'glloadidentity'
    'body': '// replaces the top of the active matrix stack with the identity matrix\ngl.glLoadIdentity();'
  'glPushMatrix':
    'prefix': 'glpushmatrix'
    'body': '// spush and pop the current matrix stack\ngl.glPushMatrix();\n$1\ngl.glPopMatrix();'
  'glRotatef':
    'prefix': 'glrotatef'
    'body': '// rotation in degrees, x coordinate of a vector, y coord., z coord.\ngl.glRotatef(${1:deg}, ${2:x}, ${3:y}, ${4:z});'
  'glScalef':
    'prefix': 'glscalef'
    'body': '// multiply the current matrix by a general scaling matrix\ngl.glScalef(${1:x}, ${2:y}, ${3:z});'
  'glTexCoord2f':
    'prefix': 'gltexcoord2f'
    'body': '// set the current texture coordinates - 2 floats\ngl.glTexCoord2f(${1:0.0f}, ${2:0.0f});'
  'glTranslatef':
    'prefix': 'gltranslatef'
    'body': '// multiply the current matrix by a translation matrix\ngl.glTranslatef(${1:x}, ${2:y}, ${3:z});'
  'glVertex2f':
    'prefix': 'glvertex2f'
    'body': 'gl.glVertex2f(${1:0.0f}, ${2:0.0f});'
  'glVertex3f':
    'prefix': 'glvertex3f'
    'body': 'gl.glVertex3f(${1:0.0f}, ${2:0.0f}, ${3:0.0f});'
  'green':
    'prefix': 'green'
    'body': 'green(${1:color});'
  'hex':
    'prefix': 'hex'
    'body': 'hex(${3:c});'
  'hour':
    'prefix': 'time'
    'body': 'hour()'
  'hue':
    'prefix': 'hue'
    'body': 'hue(${1:color});'
  '?':
    'prefix': '?'
    'body': '? ${1:trueExpression} : ${2:falseExpression}$0'
  'if':
    'prefix': 'if'
    'body': 'if ($1) {\n\t$0\n}'
  'image':
    'prefix': 'image'
    'body': 'image(${1:img}, ${2:x}, ${3:y}${6:, ${4:width}, ${5:height}});'
  'int':
    'prefix': 'int'
    'body': 'int ${1:i} ${6:= ${3:0}};'
  'join':
    'prefix': 'join'
    'body': 'join(${3:strgArray}, ${4:seperator});'
  'key':
    'prefix': 'key'
    'body': 'key'
  'keyCode':
    'prefix': 'key'
    'body': 'keyCode'
  'keyPressed':
    'prefix': 'key'
    'body': 'keyPressed'
  'keyPressed':
    'prefix': 'key'
    'body': 'void keyPressed() {\n\t${1}\n}'
  'keyReleased':
    'prefix': 'key'
    'body': 'void keyReleased() {\n\t${1}\n}'
  'keyTyped':
    'prefix': 'key'
    'body': 'void keyTyped() {\n\t${1}\n}'
  'lerp':
    'prefix': 'lerp'
    'body': 'lerp(${1:value1}, ${2:value2}, ${3:amt});'
  'lerpColor':
    'prefix': 'lerpcolor'
    'body': 'lerpColor(${1:c1}, ${2:c2}, ${3:amt});'
  'lightFalloff':
    'prefix': 'light'
    'body': 'lightFalloff(${1:constant}, ${2:linear}, ${3:quadratic});'
  'lightSpecular':
    'prefix': 'light'
    'body': 'lightFalloff(${1:v1}, ${2:v2}, ${3:v3});'
  'lights':
    'prefix': 'light'
    'body': 'lights();'
  'line 3d':
    'prefix': 'line'
    'body': 'line(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});'
  'line':
    'prefix': 'line'
    'body': 'line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2});'
  'link':
    'prefix': 'link'
    'body': 'link(${1:url}${4:, ${3:target}});'
  'loadBytes':
    'prefix': 'load'
    'body': 'loadBytes(${2:"${1:filename}"});'
  'loadFont':
    'prefix': 'font'
    'body': '${1:font} = loadFont(${3:"${2:FFScala-32.vlw}"});'
  'loadImage':
    'prefix': 'loadimage'
    'body': 'loadImage(${1:filename});'
  'loadPixels':
    'prefix': 'loadpixels'
    'body': 'loadPixels();'
  'loadShape':
    'prefix': 'loadshape'
    'body': 'loadShape(${1:filename});'
  'loadStrings':
    'prefix': 'load'
    'body': 'loadStrings(${2:"${1:filename}"});'
  'loadXML':
    'prefix': 'loadx'
    'body': 'loadXML(${2:"${1:filename}"});'
  'log':
    'prefix': 'log'
    'body': 'log(${1:value});'
  'mag':
    'prefix': 'mag'
    'body': 'mag(${1:a}, ${2:b}${4:, ${3:c}});'
  'map':
    'prefix': 'map'
    'body': 'map(${1:value}, ${2:low1}, ${4:high1}, ${5:low2}, ${6:high2});'
  'match':
    'prefix': 'match'
    'body': 'match(${3:str}, ${4:regexp});'
  'max array':
    'prefix': 'max'
    'body': 'max(${1:array});'
  'max':
    'prefix': 'max'
    'body': 'max(${1:value1}, ${2:value2});'
  'millis':
    'prefix': 'time'
    'body': 'millis()'
  'min array':
    'prefix': 'min'
    'body': 'min(${1:array}};'
  'min':
    'prefix': 'min'
    'body': 'min(${1:value1}, ${2:value2}${4:, ${3:value3}});'
  'minute':
    'prefix': 'time'
    'body': 'minute()'
  'modelX':
    'prefix': 'coordinates'
    'body': 'modelX(${1:x}, ${2:y}, ${3:z});'
  'modelY':
    'prefix': 'coordinates'
    'body': 'modelY(${1:x}, ${2:y}, ${3:z});'
  'modelZ':
    'prefix': 'coordinates'
    'body': 'modelZ(${1:x}, ${2:y}, ${3:z});'
  'month':
    'prefix': 'time'
    'body': 'month()'
  'mouseButton':
    'prefix': 'mouse'
    'body': 'mouseButton'
  'mouseDragged':
    'prefix': 'mouse'
    'body': 'void mouseDragged() {\n\t${1}\n}'
  'mouseMoved':
    'prefix': 'mouse'
    'body': 'void mouseMoved() {\n\t${1}\n}'
  'mousePressed':
    'prefix': 'mouse'
    'body': 'mousePressed'
  'mousePressed':
    'prefix': 'mouse'
    'body': 'void mousePressed() {\n\t${1}\n}'
  'mouseReleased':
    'prefix': 'mouse'
    'body': 'void mouseReleased() {\n\t${1}\n}'
  'mouseX':
    'prefix': 'mouse'
    'body': 'mouseX'
  'mouseY':
    'prefix': 'mouse'
    'body': 'mouseY'
  'nf':
    'prefix': 'nf'
    'body': 'nf(${3:value}, ${4:left}${6:, ${5:right}});'
  'nfc':
    'prefix': 'nfc'
    'body': 'nfc(${3:value}${5:, ${4:right}});'
  'nfp':
    'prefix': 'nfp'
    'body': 'nfp(${3:value}, ${4:left}${6:, ${5:right}});'
  'nfs':
    'prefix': 'nfs'
    'body': 'nfs(${3:value}, ${4:left}${6:, ${5:right}});'
  'noCursor':
    'prefix': 'cursor'
    'body': 'noCursor();'
  'noFill':
    'prefix': 'nofill'
    'body': 'noFill();'
  'noLights':
    'prefix': 'light'
    'body': 'noLights();'
  'noSmooth':
    'prefix': 'smooth'
    'body': 'noSmooth();'
  'noStroke':
    'prefix': 'nostroke'
    'body': 'noStroke();'
  'noTint':
    'prefix': 'notint'
    'body': 'noTint();'
  'noise':
    'prefix': 'noise'
    'body': 'noise(${1:x}${5:, ${2:y}${4:, ${3:z}}});'
  'noiseDetail':
    'prefix': 'noisedetail'
    'body': 'noiseDetail(${1:octaves}${4:, ${3:falloff}});'
  'noiseSeed':
    'prefix': 'noiseseed'
    'body': 'noiseSeed(${1:x});'
  'norm':
    'prefix': 'norm'
    'body': 'norm(${1:value}, ${2:low}, ${3:high});'
  'normal':
    'prefix': 'light'
    'body': 'normal(${1:nx}, ${2:ny}, ${3:nz});'
  'online':
    'prefix': 'online'
    'body': 'online'
  'ortho':
    'prefix': 'camera'
    'body': 'ortho(${7:${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far}});'
  'package':
    'prefix': 'package'
    'body': '/**\n *  ${1:Description}\n *\n *\t@author ${2:$TM_FULLNAME}\n *\t@since  ${3:`date +%d.%m.%Y`}\n */\n\npackage ${4:package};'
  'param':
    'prefix': 'param'
    'body': 'param(${1:s});'
  'parseXML':
    'prefix': 'parse'
    'body': 'parseXML(${1:rawString});'
  'perspective':
    'prefix': 'camera'
    'body': 'perspective(${5:${1:fov}, ${2:aspect}, ${3:zNear}, ${4:zFar}});'
  'pixels':
    'prefix': 'pixels'
    'body': 'pixels[${1:index}]'
  'pmouseX':
    'prefix': 'mouse'
    'body': 'pmouseX'
  'pmouseY':
    'prefix': 'mouse'
    'body': 'pmouseY'
  'point':
    'prefix': 'point'
    'body': 'point(${1:x}, ${2:y}${4:, ${3:z}});'
  'pointLight':
    'prefix': 'light'
    'body': 'pointLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});'
  'pow':
    'prefix': 'pow'
    'body': 'pow(${1:num}, ${2:exponent});'
  'printCamera':
    'prefix': 'camera'
    'body': 'printCamera();'
  'printMatrix':
    'prefix': 'matrix'
    'body': 'printMatrix();'
  'printProjection':
    'prefix': 'camera'
    'body': 'printProjection();'
  'println var':
    'prefix': 'println'
    'body': 'println("${1:var}: "+${1:var});$0'
  'println text':
    'prefix': 'println'
    'body': 'println("$1");$0'
  'private function':
    'prefix': 'private'
    'body': 'private ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}'
  'private static function':
    'prefix': 'private'
    'body': 'private static ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}'
  'private static var':
    'prefix': 'private'
    'body': 'private static ${1:String} ${2:str}${4: = ${3:value}};'
  'private var object':
    'prefix': 'private'
    'body': 'private ${1:Object} ${2:o}${4: = new ${1}($3)};'
  'private var':
    'prefix': 'private'
    'body': 'private ${1:String} ${2:str}${4: = ${3:value}};'
  'protected function':
    'prefix': 'protected'
    'body': 'protected ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}'
  'protected var object':
    'prefix': 'protected'
    'body': 'protected ${1:Object} ${2:o}${4: = new ${1}($3)};'
  'protected var':
    'prefix': 'protected'
    'body': 'protected ${1:String} ${2:str}${4: = ${3:value}};'
  'public function':
    'prefix': 'public'
    'body': 'public ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}'
  'public static function':
    'prefix': 'public'
    'body': 'public static ${1:void} ${2:name}($3) {\n\t$0${1/void$|(.+)/(?1:return null;)/}\n}'
  'public static var':
    'prefix': 'public'
    'body': 'public static ${1:String} ${2:str}${4: = ${3:value}};'
  'public var object':
    'prefix': 'public'
    'body': 'public ${1:Object} ${2:o}${4: = new ${1}($3)};'
  'public var':
    'prefix': 'public'
    'body': 'public ${1:String} ${2:str}${4: = ${3:value}};'
  'pushMatrix/popMatrix':
    'prefix': 'matrix'
    'body': 'pushMatrix();\n${1:}\npopMatrix();'
  'quad':
    'prefix': 'quad'
    'body': 'quad(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});'
  'radians':
    'prefix': 'radians'
    'body': 'radians(${1:deg});'
  'random':
    'prefix': 'random'
    'body': 'random(${1:value1}${3:, ${2:value2}});'
  'randomGaussian':
    'prefix': 'random'
    'body': 'randomGaussian();'
  'randomSeed':
    'prefix': 'random'
    'body': 'randomSeed(${1:value});'
  'rect':
    'prefix': 'rect'
    'body': 'rect(${1:x}, ${2:y}, ${3:width}, ${4:height});'
  'rectMode':
    'prefix': 'rect'
    'body': 'rectMode(${1:CENTER});'
  'red':
    'prefix': 'red'
    'body': 'red(${1:color});'
  'resetMatrix':
    'prefix': 'matrix'
    'body': 'translate(${1:x}, ${2:y}, ${3:z});'
  'reverse':
    'prefix': 'reverse'
    'body': 'reverse(${1:array});'
  'rotate':
    'prefix': 'rotate'
    'body': 'rotate(${1:rad});'
  'rotateX':
    'prefix': 'rotateX'
    'body': 'rotateX(${1:rad});'
  'rotateY':
    'prefix': 'rotate'
    'body': 'rotateY(${1:rad});'
  'rotateZ':
    'prefix': 'rotate'
    'body': 'rotateZ(${1:rad});'
  'round':
    'prefix': 'round'
    'body': 'round(${1:value});'
  'saturation':
    'prefix': 'saturation'
    'body': 'saturation(${1:color});'
  'save':
    'prefix': 'save'
    'body': 'saveFrame(${2:"${1:filename}"});'
  'saveBytes':
    'prefix': 'file'
    'body': 'saveBytes(${1:filename}, ${2:bytes});'
  'saveFrame':
    'prefix': 'save'
    'body': 'saveFrame(${2:"${1:filename-####.ext}"});'
  'saveStrings':
    'prefix': 'file'
    'body': 'saveStrings(${1:filename}, ${2:strings});'
  'saveXML':
    'prefix': 'savex'
    'body': 'saveXML(${1:xml}, ${2:filename});'
  'scale SIZE':
    'prefix': 'scale'
    'body': 'scale(${1:size});'
  'scale':
    'prefix': 'scale'
    'body': 'scale(${1:x}, ${2:y}${4:, ${3:z}});'
  'screenX':
    'prefix': 'coordinates'
    'body': 'screenX(${1:x}, ${2:y}, ${3:z});'
  'screenY':
    'prefix': 'coordinates'
    'body': 'screenY(${1:x}, ${2:y}, ${3:z});'
  'screenZ':
    'prefix': 'coordinates'
    'body': 'screenZ(${1:x}, ${2:y}, ${3:z});'
  'screen.height':
    'prefix': 'screen'
    'body': 'screen.height'
  'screen.width':
    'prefix': 'screen'
    'body': 'screen.width'
  'second':
    'prefix': 'time'
    'body': 'second()'
  'set pixel':
    'prefix': 'set'
    'body': 'set(${1:x}, ${2:y}, ${3:color/image});'
  'set':
    'prefix': 'set'
    'body': 'public void set${1/./\\u$0/}(${2:String} new${1/./\\u$0/}) {\n    ${1:fieldName} = new${1/./\\u$0/};\n}\n'
  'setSwapInterval':
    'prefix': 'glswapinterval'
    'body': '// specify the minimum swap interval for buffer swaps.\ngl.setSwapInterval(${1:interval});'
  'setup OpenGL':
    'prefix': 'setup'
    'body': 'import processing.opengl.*;\nimport javax.media.opengl.*;\n\nPGraphicsOpenGL pgl;\nGL gl;\n\nvoid setup() {\n\tsize( ${1:300}, ${2:300}, OPENGL );\n\tcolorMode( RGB, 1.0 );\n\thint( ENABLE_OPENGL_4X_SMOOTH );\n\tpgl = (PGraphicsOpenGL) g;\n\tgl = pgl.gl;\n\tgl.setSwapInterval(1);\n\tinitGL();\n\t$3\n}\n\nvoid draw() {\n\tpgl.beginGL();\n  \t$4\n\tpgl.endGL();\n\tgetOpenGLErrors();\n}\n\nvoid initGL() {\n\t$5\n}\n\nvoid getOpenGLErrors() {\n  int error = gl.glGetError();\n  switch (error) {\n    case 1280 :\n      println("GL_INVALID_ENUM - An invalid enumerant was passed to an OpenGL command.");\n    break;\n    case 1282 :\n      println("GL_INVALID_OPERATION - An OpenGL command was issued that was invalid or inappropriate for the current state.");\n    break;\n    case 1281 :\n      println("GL_INVALID_VALUE - A value was passed to OpenGL that was outside the allowed range.");\n    break;\n    case 1285 :\n      println("GL_OUT_OF_MEMORY - OpenGL was unable to allocate enough memory to process a command.");\n    break;\n    case 1283 :\n      println("GL_STACK_OVERFLOW - A command caused an OpenGL stack to overflow.");\n    break;\n    case 1284 :\n      println("GL_STACK_UNDERFLOW - A command caused an OpenGL stack to underflow.");\n    break;\n    case 32817 :\n      println("GL_TABLE_TOO_LARGE");\n    break;\n  }\n}'
  'setup':
    'prefix': 'setup'
    'body': 'void setup() {\n\t$1\n}\n\nvoid draw() {\n\t$0\n}\n'
  'shape':
    'prefix': 'shape'
    'body': 'shape(${1:s}, ${2:x}, ${3:y}, ${4:w}, ${5:h});'
  'shapeMode':
    'prefix': 'shapemode'
    'body': 'shapeMode(${1:CENTER});'
  'shininess':
    'prefix': 'material'
    'body': 'shininess(${1:shine});'
  'shorten':
    'prefix': 'shorten'
    'body': 'shorten(${1:array});'
  'sin':
    'prefix': 'sin'
    'body': 'sin(${1:rad});'
  'size OPENGL':
    'prefix': 'size'
    'body': 'size(${1:200}, ${2:200}${3:, OPENGL});'
  'size':
    'prefix': 'size'
    'body': 'size(${1:512}, ${2:512});'
  'smooth':
    'prefix': 'smooth'
    'body': 'smooth();'
  'sort':
    'prefix': 'sort'
    'body': 'sort(${1:dataArray}${3:, ${2:count}});'
  'specular':
    'prefix': 'material'
    'body': 'specular(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});'
  'sphere':
    'prefix': 'sphere'
    'body': 'sphere(${1:radius});'
  'sphereDetail':
    'prefix': 'sphere'
    'body': 'sphereDetail(${1:n});'
  'splice':
    'prefix': 'splice'
    'body': 'splice(${1:array}, ${2:value/array2}, ${3:index});'
  'split':
    'prefix': 'split'
    'body': 'split(${3:str}, ${4:delimiter});'
  'splitTokens':
    'prefix': 'split'
    'body': 'splitTokens(${3:str}${5:, ${4:tokens}});'
  'spotLight':
    'prefix': 'light'
    'body': 'spotLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:x}, ${5:y}, ${6:z}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:angle}, ${11:concentration});'
  'sq':
    'prefix': 'sq'
    'body': 'sq(${1:value});'
  'sqrt':
    'prefix': 'sqrt'
    'body': 'sqrt(${1:value});'
  'status':
    'prefix': 'status'
    'body': 'status(${1:text});'
  'str':
    'prefix': 'str'
    'body': 'str(${3:"${1:str}"});'
  'stroke grey alpha':
    'prefix': 'stroke'
    'body': 'stroke(${1:grey}, ${2:alpha});'
  'stroke grey':
    'prefix': 'stroke'
    'body': 'stroke(${1:grey});'
  'stroke rgb':
    'prefix': 'stroke'
    'body': 'stroke(${1:red}, ${2:green}, ${3:blue});'
  'stroke rgba':
    'prefix': 'stroke'
    'body': 'stroke(${1:red}, ${2:green}, ${3:blue}, ${6:alpha});'
  'stroke':
    'prefix': 'stroke'
    'body': 'stroke(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});'
  'strokeWeight':
    'prefix': 'stroke'
    'body': 'strokeWeight(${1:1});'
  'subset':
    'prefix': 'subset'
    'body': 'subset(${1:array}, ${2:offset});'
  'switch':
    'prefix': 'switch'
    'body': 'switch ($1) {\n\t$0\n}'
  'tan':
    'prefix': 'tan'
    'body': 'tan(${1:rad});'
  'text data':
    'prefix': 'text'
    'body': 'text(${1:data}, ${2:x}, ${3:y}${5:, ${4:z}});'
  'text stringdata':
    'prefix': 'text'
    'body': 'text(${1:stringdata}, ${2:x}, ${3:y}, ${4:width}, ${5:height}${7:, ${6:z}});'
  'textAscent':
    'prefix': 'text'
    'body': 'textAscent();'
  'textDescent':
    'prefix': 'text'
    'body': 'textDescent();'
  'textFont':
    'prefix': 'text'
    'body': 'textFont(${1:font}${7:, ${6:size}});'
  'textLeading':
    'prefix': 'text'
    'body': 'textLeading(${1:size});'
  'textSize':
    'prefix': 'text'
    'body': 'textSize(${1:size});'
  'textWidth':
    'prefix': 'text'
    'body': 'textWidth(${1:data});'
  'throw':
    'prefix': 'throw'
    'body': 'throw new Exception("${1:Name}");'
  'tint':
    'prefix': 'tint'
    'body': 'tint(${8:${3:value1}, ${4:value2}, ${5:value3}${7:, ${6:alpha}}});'
  'translate':
    'prefix': 'translate'
    'body': 'translate(${1:x}, ${2:y}${4:, ${3:z}});'
  'triangle':
    'prefix': 'triangle'
    'body': 'triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3});'
  'trim':
    'prefix': 'trim'
    'body': 'trim(${3:str});'
  'try':
    'prefix': 'try'
    'body': 'try {\n\t$1\n}'
  'try..catch':
    'prefix': 'try'
    'body': 'try {\n\t$1\n} catch (${2:Exception} e) {\n\t$3\n}'
  'try..catch..finally':
    'prefix': 'try'
    'body': 'try {\n\t$1\n} catch (${2:Exception} e) {\n\t$3\n} finally {\n\t$4\n}'
  'unbinary':
    'prefix': 'unbinary'
    'body': 'unbinary(${3:"${1:str}"});'
  'unhex':
    'prefix': 'unhex'
    'body': 'unhex(${3:c});'
  'updatePixels':
    'prefix': 'updatepixels'
    'body': 'updatePixels();'
  'var object':
    'prefix': 'var'
    'body': '${1:Object} ${2:o}${4: = new ${1}($3)};'
  'var':
    'prefix': 'var'
    'body': '${1:String} ${2:str}${4: = ${3:value};}'
  'var vector':
    'prefix': 'vec'
    'body': 'PVector ${1:v} = new PVector(${2});'
  'var vector xy':
    'prefix': 'vec'
    'body': 'PVector ${1:v} = new PVector(${2:x},${3:y});'
  'var vector xyz':
    'prefix': 'vec'
    'body': 'PVector ${1:v} = new PVector(${2:x},${3:y},${4:z});'
  'vertex 3D':
    'prefix': 'vertex'
    'body': 'vertex(${1:x}, ${2:y}, ${3:z}${6:, ${4:u}, ${5:v}});'
  'vertex':
    'prefix': 'vertex'
    'body': 'vertex(${1:x}, ${2:y}${5:, ${3:u}, ${4:v}});'
  'while':
    'prefix': 'while'
    'body': 'while ($1) {\n\t$0\n}'
  'year':
    'prefix': 'time'
    'body': 'year()'
